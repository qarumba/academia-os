ACADEMIAOS 2.0 - SOLUTION FILE STRUCTURE

1. PROJECT ORGANIZATION

Root Directory: academia-os-2.0/
Primary Language: TypeScript/React
Build System: Create React App
Package Manager: npm

2. DIRECTORY STRUCTURE

public/
- Static assets (favicon.png, index.html, manifest.json, overview.gif)
- Entry point for React application
- Enhanced branding for AcademiaOS 2.0

server/
- Node.js API server for Helicone proxy
- server.js: Express server with CORS handling
- package.json: Server-specific dependencies
- README.md: Server setup and deployment guide

src/
├── Components/           # React UI components
│   ├── Charts/          # Data visualization (GioiaCoding.tsx, Mermaid.tsx)
│   ├── Steps/           # Workflow components (Find.tsx, Coding.tsx, Modeling.tsx)
│   │   └── Modeling/    # Modeling sub-components (Interrelationships.tsx)
│   └── *.tsx            # Core components (ModelConfiguration, PaperTable, etc.)
├── Services/            # Business logic layer (LangChain v0.3 compatible)
│   └── *.ts             # Service classes (ChatService, QualitativeAnalysisService, etc.)
├── Redux/               # State management
│   └── *.ts             # Store, reducers, actions
├── Types/               # TypeScript definitions
│   └── *.ts             # Interface definitions (AcademicPaper, ModelData)
├── Helpers/             # Utility functions
│   └── *.ts             # Async utilities (asyncForEach, asyncMap, uniqBy)
├── Providers/           # React context providers
│   └── ThemeContext.tsx # Theme management
└── __mocks__/           # Test mocking utilities
    └── langchain/       # LangChain v0.3 mocks

3. KEY FILES

Configuration:
- package.json: Project dependencies and scripts
- tsconfig.json: TypeScript configuration
- docker-compose.yml: Multi-container orchestration

Documentation:
- README.md: Setup and development guide
- LICENSE.md: MIT license terms
- CONTRIBUTING.MD: Contribution guidelines

Build:
- Dockerfile: Container configuration
- npm_output.log: Build logs

4. FILE STATISTICS

Total Files: ~85 (excluding node_modules)
TypeScript Files: ~45 (.ts/.tsx)
JavaScript Files: ~6 (.js)
JSON Configuration: ~4 (.json)
Markdown Documentation: ~8 (.md)
CSS Styling: ~2 (.css)

5. COMPONENT ORGANIZATION

Workflow Components:
- Find.tsx: Literature search and paper upload
- Coding.tsx: Qualitative analysis and theme identification  
- Modeling.tsx: Theory construction and visualization

Core Components:
- ModelConfiguration.tsx: AI model setup interface
- PaperTable.tsx: Academic paper display and management
- HeliconeMonitor.tsx: API usage monitoring
- SearchLoadingState.tsx: Progressive loading interface

Service Classes:
- ChatService.ts: Multi-provider AI model abstraction (LangChain v0.3)
- QualitativeAnalysisService.ts: Gioia methodology implementation (updated imports)
- EmbeddingService.ts: Vector embeddings management (@langchain/openai)
- HeliconeService.ts: API monitoring and cost tracking (server proxy)
- RankingService.ts: Paper relevance scoring (@langchain/textsplitters)
- SearchService.ts: Academic paper search (rate limiting)

6. ARCHITECTURE PATTERNS

Frontend:
- Component-based React architecture
- Redux state management for global configuration
- Context API for theme management
- Service layer pattern for business logic
- LangChain v0.3 integration with async imports

Backend:
- Express.js API server
- Proxy pattern for Helicone integration
- CORS handling for browser compatibility
- Production-ready server configuration

Build System:
- Create React App configuration
- TypeScript compilation
- Docker containerization support
- LangChain v0.3 package overrides

7. POWERSHELL AUTOMATION

File Structure Generation Script:
Location: Utilities/Generate-FileStructure.ps1
Purpose: Automated project analysis and documentation
Features: 
- Recursive directory traversal
- File type categorization
- Size and statistics calculation
- Customizable output formatting

Usage:
./Utilities/Generate-FileStructure.ps1 -OutputFile "structure.txt"

8. DEVELOPMENT WORKFLOW

Local Development:
1. npm install (install dependencies)
2. npm start (development server)
3. npm run server:dev (API server for Helicone with auto-restart)

Full Stack:
1. npm run setup (install all dependencies - client + server)
2. npm run dev (start both React client and Helicone server)

Production:
1. npm run build (create production bundle)
2. Docker deployment with docker-compose
3. Server deployment with npm run server

LangChain v0.3 Migration Notes:
- All @langchain/* packages are properly configured
- Package overrides ensure consistent @langchain/core version
- Async imports used for optimal performance
- Backward compatibility maintained

Last Updated: June 8, 2025
LangChain v0.3.27 Migration: Complete